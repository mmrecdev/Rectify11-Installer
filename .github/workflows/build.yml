name: mros

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_run:
    workflows: ["Submodules Sync"]
    types:
      - completed
  workflow_dispatch: # Added manual trigger

jobs:
  build:
    runs-on: windows-latest
    env:
      NUGET_CERT_REVOCATION_MODE: offline
    steps:
    # Step 1: Checkout code with submodules and LFS
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: recursive
        lfs: true

    # Step 2: Post-initialization - Validate submodules and project structure
    - name: Validate Submodules and Project Structure
      run: |
        if (!(Test-Path -Path "mrosInstaller\mrosInstaller.sln")) {
          Write-Error "mrosInstaller.sln not found!"
          exit 1
        }
        if (!(Test-Path -Path "mrosControlCenter\mrosControlCenter.sln")) {
          Write-Error "mrosControlCenter.sln not found!"
          exit 1
        }
        Write-Output "Submodules and project structure validated."

    # Step 3: Pre-build - Validate system DLLs for icon resources
    - name: Validate System DLLs for Theming
      run: |
        $shell32Path = "C:\Windows\System32\shell32.dll"
        $imageresPath = "C:\Windows\System32\imageres.dll"
        if (!(Test-Path -Path $shell32Path)) {
          Write-Error "shell32.dll not found!"
          exit 1
        }
        if (!(Test-Path -Path $imageresPath)) {
          Write-Error "imageres.dll not found!"
          exit 1
        }
        Write-Output "System DLLs (shell32.dll, imageres.dll) validated for icon extraction."

    # Step 4: Pre-build - Install additional tools (e.g., for icon processing)
    - name: Install Resource Extraction Tools
      run: |
        choco install 7zip -y
        Write-Output "Installed 7-Zip for resource extraction."

    # Step 5: Add MSBuild to PATH
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    # Step 6: Restore NuGet Packages
    - name: Restore NuGet Packages
      run: |
        nuget restore mrosInstaller.sln
        nuget restore mrosControlCenter\mrosControlCenter.sln

    # Step 7: Build mros Control Center
    - name: Build mros Control Center
      run: msbuild mrosControlCenter\mrosControlCenter.sln /p:Configuration=Release /p:Platform=x64

    # Step 8: Build mros Installer
    - name: Build mros Installer
      run: msbuild mrosInstaller.sln /p:Configuration=Release /p:Platform=x64

    # Step 9: Create single executable with ILRepack
    - name: Create Single Executable
      run: |
        .\mrosInstaller\ILRepack.exe `
          .\mrosInstaller\bin\Release\mrosInstaller.exe `
          /out:.\mrosInstaller\bin\output\Release\mrosInstaller.exe `
(via PowerShell) `
          .\mrosInstaller\bin\Release\libmsstyle.dll `
          .\mrosInstaller\bin\Release\TaskDialog.dll
        if ($LASTEXITCODE -ne 0) {
          Write-Error "ILRepack failed!"
          exit 1
        }

    # Step 10: Post-build - Validate Windows 12-Style Theming
    - name: Validate Windows 12-Style Theming
      run: |
        $outputExe = ".\mrosInstaller\bin\output\Release\mrosInstaller.exe"
        if (!(Test-Path -Path $outputExe)) {
          Write-Error "mrosInstaller.exe not found!"
          exit 1
        }
        Write-Output "Windows 12-style theming resources validated (placeholder)."

    # Step 11: Upload mros Installer artifact
    - name: Upload mros Installer
      uses: actions/upload-artifact@v4
      with:
        name: mrosInstaller (x64)
        path: .\mrosInstaller\bin\output\Release\mrosInstaller.exe
        if-no-files-found: error
